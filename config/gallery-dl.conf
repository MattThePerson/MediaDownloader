{
    "extractor":
    {
        "base-directory": "./",

        "#": "set global archive file for all extractors",
        "#archive": "./gallery-dl/archive.sqlite3",
        "archive-pragma": ["journal_mode=WAL", "synchronous=NORMAL"],

        "#": "add two custom keywords into the metadata dictionary",
        "#": "these can be used to further refine your output directories or filenames",
        "keywords": {"bkey": "", "ckey": ""},
        "#": "make sure that custom keywords are empty, i.e. they don't appear unless specified by the user",
        "keywords-default": "",

        "extension-map": {
            "jpeg": "jpg",
            "jpe" : "jpg",
            "jfif": "jpg",
            "jif" : "jpg",
            "jfi" : "jpg"
        },

        "path-restrict": {
            "\\": "⧹",
            "/" : "⧸",
            "|" : "￨",
            ":" : "꞉",
            "*" : "∗",
            "?" : "？",
            "\"": "″",
            "<" : "﹤",
            ">" : "﹥"
        },
        "#" : "Just a comment to fix the syntax issue caused by the above lines",


        "postprocessors": [
            {
                "name": "metadata",
                "mode": "tags",
                "whitelist": ["moebooru", "sankaku"]
            }
        ],

        "#": "===============================================================",

        "#": "====    Site-specific Extractor Options    ====================",
        


        "twitter":
        {
            "postprocessors": ["content"],
            "text-tweets": false,
            "filename": {
                "count > 1":    "[{date}] {filename} (item-{num}) [{tweet_id}].{extension}",
                "":             "[{date}] {filename} [{tweet_id}].{extension}"
            }
        },

        
        "reddit":
        {
            "#": "only spawn child extractors for links to specific sites",
            "whitelist": ["imgur", "redgifs"],

            "#": "put files from child extractors into the reddit directory",
            "parent-directory": true,

            "#": "transfer metadata to any child extractor as '_reddit'",
            "parent-metadata": "_reddit",

            "postprocessors": ["content-reddit", "scrape-reddit-comments-python"],

            "filename": {
                "num > 0":      "[{date}] {title} (item-{num}) [{id}].{extension}",
                "":             "[{date}] {title} [{id}].{extension}"
            },
            "directory": ["reddit", "{subreddit}"]
        },


        "reddit>redgifs":
        {
            "postprocessors": ["video-convert-mp4-call-python", "scrape-reddit-comments-python-REDGIFS"],
            "filename": {
                "":                                     "[{_reddit[date]}] {_reddit[title]} [{filename}] [{_reddit[id]}].{extension}"
            },
            "directory": []
        },


        "reddit>imgur":
        {
            "#": "special settings for imgur URLs found in reddit posts",
            "directory": [],
            "filename": "{_reddit[id]} {_reddit[title]} {id}.{extension}"
        },


        "redgifs":
        {
            "postprocessors": ["content", "video-convert-mp4-call-python"],
            "filename": {
                "":     "[{date}] {filename} [{id}].{extension}"
            },
            "directory": ["redgifs", "{userName}"]
        },


        "danbooru":
        {

            "filename": {
                "": "[{date}] {tag_string_artist} {tag_string_character} {tag_string_copyright} [{id}].{extension}"
            },
            "directory": ["danbooru", "{uploader[name]}"],

            "ugoira": true,
            
            "postprocessors": [
                {
                    "name" : "metadata",
                    "event": "post",
                    "filename": "{post_id|tweet_id|id}.txt",
                    "mode" : "custom",
                    "format": "score={score}\n tags_artist={tags_artist}\n tags_character={tags_character}\n tags_copyright={tags_copyright}\n tags_general={tags_general}\n"
                }
            ]
        },


        "rule34": {
            "filename": {
                "":     "[{date}] {filename} [{id}].{extension}"
            },
            "directory": ["rule34", "{uploader[name]}"],
            "postprocessors": [
                {
                    "name" : "metadata",
                    "event": "post",
                    "filename": "{post_id|tweet_id|id}.txt",
                    "mode" : "custom",
                    "format": "score={score}\n tags_string={tags}\n"
                }
            ]
        },
        

        
        "bluesky": {
            "postprocessors": ["content"],
            "filename": {
                "":     "[{date}] {filename} [{post_id}].{extension}"
            }
        },



        "instagram": {
            "cookies": "cookies/instagram_cookies.txt",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:115.0) Gecko/20100101 Firefox/115.0",
            "postprocessors": ["content"],
            "filename": {
                "count > 1":    "[{date}] {filename} (item-{num}) [{post_id}].{extension}",
                "":             "[{date}] {filename} [{post_id}].{extension}"
            }
        },


        "pornhub": {
            "postprocessors": ["content", "scrape-phub-metadata"],
            "filename": {
                "": "[{date}] {title} [{viewkey}] [{id}].{extension}"
            },
            "directory": ["pornhub", "{user|'_NoUser'}"]
        },
        
        

        "#": "===============================================================",
        
        "ytdl":
        {
            "#": "enable 'ytdl' extractor",
            "#": "i.e. invoke ytdl on all otherwise unsupported input URLs",
            "enabled": true,

            "#": "use yt-dlp instead of youtube-dl",
            "module": "yt_dlp",

            "#": "load ytdl options from config file",
            "config-file": "config/yt-dlp.conf"
        },

        "mastodon":
        {
            "#": "add 'tabletop.social' as recognized mastodon instance",
            "#": "(run 'gallery-dl oauth:mastodon:tabletop.social to get an access token')",
            "tabletop.social":
            {
                "root": "https://tabletop.social",
                "access-token": "513a36c6..."
            },

            "#": "set filename format strings for all 'mastodon' instances",
            "directory": ["mastodon", "{instance}", "{account[username]!l}"],
            "filename" : "{id}_{media[id]}.{extension}"
        },

        "foolslide": {
            "#": "add two more foolslide instances",
            "otscans"  : {"root": "https://otscans.com/foolslide"},
            "helvetica": {"root": "https://helveticascans.com/r" }
        },

        "foolfuuka": {
            "#": "add two other foolfuuka 4chan archives",
            "fireden-onion": {"root": "http://ydt6jy2ng3s3xg2e.onion"},
            "scalearchive" : {"root": "https://archive.scaled.team"  }
        },

        "gelbooru_v01":
        {
            "#": "add a custom gelbooru_v01 instance",
            "#": "this is just an example, this specific instance is already included!",
            "allgirlbooru": {"root": "https://allgirl.booru.org"},

            "#": "the following options are used for all gelbooru_v01 instances",
            "tag":
            {
                "directory": {
                    "locals().get('bkey')": ["Booru", "AllGirlBooru", "Tags", "{bkey}", "{ckey}", "{search_tags}"],
                    ""                    : ["Booru", "AllGirlBooru", "Tags", "_Unsorted", "{search_tags}"]
                }
            },
            "post":
            {
                "directory": ["Booru", "AllGirlBooru", "Posts"]
            },
            "archive": "./gallery-dl/custom-archive-file-for-gelbooru_v01_instances.db",
            "filename": "{tags}_{id}_{md5}.{extension}",
            "sleep-request": [0, 1.2]
        },

        "gelbooru_v02":
        {
            "#": "add a custom gelbooru_v02 instance",
            "#": "this is just an example, this specific instance is already included!",
            "tbib":
            {
                "root": "https://tbib.org",
                "#": "some sites have different domains for API access",
                "#": "use the 'api_root' option in addition to the 'root' setting here"
            }
        },

        "tbib": {
            "#": "the following options are only used for TBIB",
            "#": "gelbooru_v02 has four subcategories at the moment, use custom directory settings for all of these",
            "tag":
            {
                "directory": {
                    "locals().get('bkey')": ["Other Boorus", "TBIB", "Tags", "{bkey}", "{ckey}", "{search_tags}"],
                    ""                    : ["Other Boorus", "TBIB", "Tags", "_Unsorted", "{search_tags}"]
                }
            },
            "pool":
            {
                "directory": {
                    "locals().get('bkey')": ["Other Boorus", "TBIB", "Pools", "{bkey}", "{ckey}", "{pool}"],
                    ""                    : ["Other Boorus", "TBIB", "Pools", "_Unsorted", "{pool}"]
                }
            },
            "favorite":
            {
                "directory": {
                    "locals().get('bkey')": ["Other Boorus", "TBIB", "Favorites", "{bkey}", "{ckey}", "{favorite_id}"],
                    ""                    : ["Other Boorus", "TBIB", "Favorites", "_Unsorted", "{favorite_id}"]
                }
            },
            "post":
            {
                "directory": ["Other Boorus", "TBIB", "Posts"]
            },
            "archive": "./gallery-dl/custom-archive-file-for-TBIB.db",
            "filename": "{id}_{md5}.{extension}",
            "sleep-request": [0, 1.2]
        },

        "urlshortener": {
            "tinyurl": {"root": "https://tinyurl.com"}
        }
    },

    "downloader":
    {
        "#": "restrict download speed to 1 MB/s",
        "rate": "1M",

        "#": "show download progress indicator after 2 seconds",
        "progress": 2.0,

        "#": "retry failed downloads up to 3 times",
        "retries": 3,

        "#": "consider a download 'failed' after 8 seconds of inactivity",
        "timeout": 8.0,

        "#": "write '.part' files into a special directory",
        "part-directory": "/tmp/.download/",

        "#": "do not update file modification times",
        "mtime": false,

        "ytdl":
        {
            "#": "use yt-dlp instead of youtube-dl",
            "module": "yt_dlp"
        }
    },

    "output":
    {
        "log": {
            "level": "info",

            "#": "use different ANSI colors for each log level",
            "format": {
                "debug"  : "\u001b[0;37m{name}: {message}\u001b[0m",
                "info"   : "\u001b[1;37m{name}: {message}\u001b[0m",
                "warning": "\u001b[1;33m{name}: {message}\u001b[0m",
                "error"  : "\u001b[1;31m{name}: {message}\u001b[0m"
            }
        },

        "#": "shorten filenames to fit into one terminal line",
        "#": "while also considering wider East-Asian characters",
        "shorten": "eaw",

        "#": "enable ANSI escape sequences on Windows",
        "ansi": true,

        "#": "write logging messages to a separate file",
        "logfile": {
            "path": "./gallery-dl/log.txt",
            "mode": "w",
            "level": "debug"
        },

        "#": "write unrecognized URLs to a separate file",
        "unsupportedfile": {
            "path": "./gallery-dl/unsupported.txt",
            "mode": "a",
            "format": "{asctime} {message}",
            "format-date": "%Y-%m-%d-%H-%M-%S"
        }
    },

    "postprocessor":
    {
        "#": "write 'content' metadata into separate files",
        "content":
        {
            "name" : "metadata",

            "#": "write data for every post instead of each individual file",
            "event": "post",
            "filename": "{post_id|tweet_id|id}.txt",

            "#": "write only the values for 'content' or 'description'",
            "mode" : "custom",
            "format": "title={title}\n content={content|description}\n likes={favorite_count|ups|likes|likes_count}\n upvote_ratio={upvote_ratio}\n views={views}\n tags={tags}\n"
        },

        "content-reddit":
        {
            "name" : "metadata",

            "#": "write data for every post instead of each individual file",
            "event": "post",
            "filename": "{post_id|tweet_id|id}.txt",

            "#": "write only the values for 'content' or 'description'",
            "mode" : "custom",
            "format": "title={title}\n content={content|description}\n likes={favorite_count|ups|likes|likes_count}\n author={author}\n upvote_ratio={upvote_ratio}\n views={views}\n tags={tags}\n"
        },

        "#": "put files into a '.cbz' archive",
        "cbz":
        {
            "name": "zip",
            "extension": "cbz"
        },

        "#": "various ugoira post processor configurations to create different file formats",
        "ugoira-webm":
        {
            "name": "ugoira",
            "extension": "webm",
            "ffmpeg-args": ["-c:v", "libvpx-vp9", "-an", "-b:v", "0", "-crf", "30"],
            "ffmpeg-twopass": true,
            "ffmpeg-demuxer": "image2"
        },
        "ugoira-mp4":
        {
            "name": "ugoira",
            "extension": "mp4",
            "ffmpeg-args": ["-c:v", "libx264", "-an", "-b:v", "4M", "-preset", "veryslow"],
            "ffmpeg-twopass": true,
            "libx264-prevent-odd": true
        },
        "ugoira-gif":
        {
            "name": "ugoira",
            "extension": "gif",
            "ffmpeg-args": ["-filter_complex", "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse"]
        },
        "ugoira-copy": {
            "name": "ugoira",
            "extension": "mkv",
            "ffmpeg-args": ["-c", "copy"],
            "libx264-prevent-odd": false,
            "repeat-last-frame": false
        },
        "ugoira-copy-mp4": {
            "name": "ugoira",
            "extension": "mp4",
            "ffmpeg-args": ["-c", "copy"],
            "libx264-prevent-odd": false,
            "repeat-last-frame": false
        },
        "video-convert-mp4-call-python": {
            "name": "exec",
            "command": ["python3", "scripts/convert-to-mp4.py", "{_path}"]
        },
        "scrape-reddit-comments-python": {
            "name": "exec",
            "command": ["venv/bin/python3", "scripts/reddit-comment-scraper.py", "{_path}", "{id}", "{num}"]
        },
        "scrape-reddit-comments-python-REDGIFS": {
            "name": "exec",
            "command": ["venv/bin/python3", "scripts/reddit-comment-scraper.py", "{_path}", "{_reddit[id]}"]
        },
        "scrape-phub-metadata": {
            "name": "exec",
            "command": ["venv/bin/python3", "scripts/phub-metadata-scraper.py", "{_path}", "{viewkey}"]
        },
        "test-exec": {
            "name": "exec",
            "command": ["echo", "FUNNY HORSE HAHAHAHAAA"]
        }
    },

    "#": "use a custom cache file location",
    "cache": {
        "file": "./gallery-dl/cache.sqlite3"
    }
}
